{"version":3,"file":"cropper.js","sources":["components/nice-cropper/cropper.js?vue&type=script&src=true&lang.js","D:/HBuilderX.4.45.2025010502/HBuilderX/plugins/uniapp-cli-vite/uniComponent:/RTovR2l0UHJvamVjdC91bmlhcHBXYXJkcm9iZS9jb21wb25lbnRzL25pY2UtY3JvcHBlci9jcm9wcGVyLnZ1ZQ"],"sourcesContent":["const ABS = Math.abs\nconst calcLen = (v) => { // distance between two coordinate \n  return Math.sqrt(v.x * v.x + v.y * v.y)\n}\nconst calcAngle = (a, b) => { // angle of the two vectors\n  var l = calcLen(a) * calcLen(b); var cosValue; var angle\n  if (l) {\n    cosValue = (a.x * b.x + a.y * b.y) / l\n    angle = Math.acos(Math.min(cosValue, 1))\n    angle = a.x * b.y - b.x * a.y > 0 ? -angle : angle\n    return angle * 180 / Math.PI\n  }\n  return 0\n}\nconst generateCanvasId = () => { // generate a random string\n  const seeds = 'abcdefghijklmnopqrstuvwxyz'\n  const arr = seeds.split('').concat(seeds.toUpperCase().split('')).concat('0123456789'.split(''))\n  let m = arr.length; let i\n  while (m) {\n    i = Math.floor(Math.random() * m--)\n    const temp = arr[m]\n    arr[m] = arr[i]\n    arr[i] = temp\n  }\n  return arr.slice(0, 16).join('')\n}\n\nexport default {\n  props: {\n    width: { // width of the container\n      type: [String, Number],\n      default: '100%'\n    },\n    height: { // height of the container\n      type: [String, Number],\n      default: '100%'\n    },\n    cutWidth: { // cutter width\n      type: [String, Number],\n      default: '400px'\n    },\n    cutHeight: { // cutter height\n      type: [String, Number],\n      default: '400px'\n    },\n    minWidth: { // minWidth of the cutter\n      type: Number,\n      default: 50\n    },\n    minHeight: { // minHeight of the cutter\n      type: Number,\n      default: 50\n    },\n    center: { // autoCenter\n      type: Boolean,\n      default: true\n    },\n    src: String, \n    disableScale: Boolean, // disable to zoom\n    disableRotate: Boolean, \n    disableTranslate: Boolean, \n    disableCtrl: Boolean, // disable to resize the cutter\n    boundDetect: Boolean, // open boundary detection\n    freeBoundDetect: Boolean, // open boundary detection while doing rotation\n    keepRatio: Boolean, // keep the ratio of the cutter\n    disablePreview: Boolean, // disable preview after cutting\n    showCtrlBorder: Boolean, // show cutter border\n    resetCut: Boolean, // reset cut while img change\n    fit: {\n      type: Boolean,\n      default: true\n    },\n    imageCenter: Boolean, // auto center/middle for image\n    maxZoom: { // maximum scaling factor \n      type: Number,\n      default: 10 // can not be Infinity in baidu-MiniProgram\n    },\n    minZoom: { // minimum scaling factor\n      type: Number,\n      default: 1\n    },\n    angle: { // initial angle of rotation\n      type: Number,\n      default: 0\n    },\n    zoom: { // initial scaling factor\n      type: Number,\n      default: 1\n    },\n    offset: { // initial offset relative to the cutter left border\n      type: Array,\n      default() {\n        return [0, 0]\n      }\n    },\n    background: {\n      type: String,\n      default: '#000'\n    },\n    canvasBackground: { // background for the exported image\n      type: String,\n      default: '#fff'\n    },\n    canvasZoom: {  // export multiples of the cutter size\n      type: Number,\n      default: 1\n    },\n    fileType: {\n      type: String,\n      default: 'png',\n      validator(t) {\n        return ['png', 'jpg'].includes(t)\n      }\n    },\n    quality: {\n      type: Number,\n      default: 1\n    },\n    maskType: { // type for mask\n      type: String,\n      default: \"shadow\"\n    },\n    circleView: Boolean // circle clip view\n  },\n  data() {\n    return {\n      transform: {\n        angle: 0,\n        translate: {\n          x: 0,\n          y: 0\n        },\n        zoom: 1\n      },\n      corner: {\n        left: 50,\n        right: 50,\n        bottom: 50,\n        top: 50\n      },\n      image: {\n        originWidth: 0,\n        originHeight: 0,\n        width: 0,\n        height: 0\n      },\n      ctrlWidth: 0,\n      ctrlHeight: 0,\n      view: false,\n      canvasId: ''\n    }\n  },\n  computed: {\n    transformMeta: function() {\n      const transform = this.transform\n      return `translate3d(${transform.translate.x}px, ${transform.translate.y}px, 0) rotate(${transform.angle}deg) scale(${transform.zoom})`\n    },\n    ctrlStyle: function() {\n      const corner = this.corner\n      let cssStr = `left: ${corner.left}px;top: ${corner.top}px;right: ${corner.right}px;bottom: ${corner.bottom }px;`\n      if(this.maskType !== 'outline') {\n        cssStr += `box-shadow: 0 0 0 50000rpx rgba(0,0,0, ${this.view ? 0.8 : 0.4})`\n      } else {\n        cssStr += `outline: rgba(0,0,0, ${this.view ? 0.8 : 0.4}) solid 5000px`\n      }\n      return cssStr\n    }\n  },\n  watch: {\n    src: function() {\n      if(this.resetCut) this.resetCutReact()\n      this.initImage()\n    }\n  },\n  created() {\n    this.canvasId = generateCanvasId()\n    uni.getSystemInfo().then(result => {\n      result = result[1] || {windowWidth: 375, windowHeight: 736}\n      this.ratio = result.windowWidth / 750\n      this.windowHeight = result.windowHeight\n      this.init()\n      this.initCanvas()\n    })\n  },\n  methods: {\n    toPx(str) {\n      if (str.indexOf('%') !== -1) {\n        return Math.floor(Number(str.replace('%', '')) / 100 * this.containerWidth)\n      }\n      if (str.indexOf('rpx') !== -1) {\n        return Math.floor(Number(str.replace('rpx', '')) * this.ratio)\n      }\n      return Math.floor(Number(str.replace('px', '')))\n    },\n    initCanvas() {\n\t\t\t// #ifdef MP-ALIPAY\n\t\t\tconst context = uni.createSelectorQuery()\n\t\t\t// #endif\n\t\t\t// #ifndef MP-ALIPAY\n\t\t\tconst context = uni.createSelectorQuery().in(this)\n\t\t\t// #endif\n      \n      // get contianer size\n      context.select('.nice-cropper').boundingClientRect()\n      context.exec(res => {\n        this.containerWidth = res[0].width\n        this.containerHeight = res[0].height\n        this.initCut()\n      })\n    },\n    resetCutReact() {// init size and position of the cutter\n      this.ctrlWidth = Math.min(this.toPx(this.cutWidth), this.containerWidth)\n      if (this.cutHeight) {\n        this.ctrlHeight = Math.min(this.toPx(this.cutHeight), this.containerHeight)\n      } else { // 默认为正方形\n        this.ctrlHeight = Math.min(this.ctrlWidth, this.containerHeight)\n      }\n      const cornerStartX = this.center ? Math.floor((this.containerWidth - this.ctrlWidth) / 2) : 0\n      const cornerStartY = this.center ? Math.floor((this.containerHeight - this.ctrlHeight) / 2) : 0\n      this.cutRatio = this.ctrlHeight / this.ctrlWidth\n      this.corner = {\n        left: cornerStartX,\n        right: this.containerWidth - this.ctrlWidth - cornerStartX,\n        top: cornerStartY,\n        bottom: this.containerHeight - this.ctrlHeight - cornerStartY\n      }\n    },\n    initCut() { \n      this.resetCutReact()\n      this.initImage()\n    },\n    async initImage() {\r\n      if (!this.src) return\r\n    \r\n      try {\r\n        const res = await uni.getImageInfo({\r\n          src: this.src\r\n        })\r\n    \r\n        this.$emit('load', res)\r\n    \r\n        // 初始化图片尺寸\r\n        this.image.originWidth = res.width\r\n        this.image.originHeight = res.height\r\n        this.image.width = this.fit ? this.ctrlWidth : this.image.originWidth\r\n        this.image.height = res.height / res.width * this.image.width\r\n        this.img = res.path\r\n    \r\n      } catch (err) {\r\n        this.$emit(\"error\", err)\r\n    \r\n        // fallback\r\n        this.image.originWidth = this.ctrlWidth\r\n        this.image.originHeight = this.ctrlHeight\r\n        this.image.width = this.ctrlWidth\r\n        this.image.height = this.ctrlHeight\r\n      }\r\n    \r\n      const offset = [0, 0]\r\n      if(this.imageCenter) {\r\n        offset[0] = (this.ctrlWidth - this.image.width) / 2\r\n        offset[1] = (this.ctrlHeight - this.image.height) / 2\r\n      }\r\n      offset[0] += this.offset[0] || 0\r\n      offset[1] += this.offset[1] || 0\r\n    \r\n      this.setTranslate(offset)\r\n      this.setZoom(this.zoom)\r\n\t  console.log(\"initImage****\")\r\n      this.transform.angle = this.freeBoundDetect || !this.disableRotate ? this.angle : 0\r\n    \r\n      this.setBoundary()\r\n      this.preview()\r\n      this.draw()\r\n    }\r\n,\n    init() {\n      this.pretouch = {}\n      this.handles = {}\n      this.preVector = {\n        x: 0,\n        y: 0\n      }\n      this.distance = 30\n      this.touch = {}\n      this.movetouch = {}\n      this.cutMode = false\n      this.params = {\n        zoom: 1,\n        deltaX: 0,\n        deltaY: 0,\n        diffX: 0,\n        diffY: 0,\n        angle: 0\n      }\n    },\n    start(e) {\n      if(!this.src) e.preventDefault() \n      const point = e.touches ? e.touches[0] : e\n      const touch = this.touch\n      const now = Date.now()\n      touch.startX = point.pageX\n      touch.startY = point.pageY\n      touch.startTime = now\n      this.doubleTap = false\n      this.view = false\n      clearTimeout(this.previewTimer)\n      if (e.touches.length > 1) {\n        var point2 = e.touches[1]\n        this.preVector = {\n          x: point2.pageX - this.touch.startX,\n          y: point2.pageY - this.touch.startY\n        }\n        this.startDistance = calcLen(this.preVector)\n      } else {\n        let pretouch = this.pretouch\n        this.doubleTap = this.pretouch.time && now - this.pretouch.time < 300 && ABS(touch.startX - pretouch.startX) < 30 && ABS(touch.startY - pretouch.startY) < 30 && ABS(touch.startTime - pretouch.time) < 300\n        pretouch = { // reserve the last touch\n          startX: this.touch.startX,\n          startY: this.touch.startY,\n          time: this.touch.startTime\n        }\n      }\n    },\n    move(e) {\n      if(!this.src) return \n      const point = e.touches ? e.touches[0] : e\n      if (e.touches.length > 1) { // multi touch\n        const point2 = e.touches[1]\n        const v = {\n          x: point2.pageX - point.pageX,\n          y: point2.pageY - point.pageY\n        }\n\n        if (this.preVector.x !== null) {\n          if (this.startDistance) { // zoom\n            const len = calcLen(v)\n            this.params.zoom = calcLen(v) / this.startDistance\n            this.startDistance = len\n            this.cutMode && !this.disableCtrl ? this.setCut() : !this.disableScale && this.pinch()\n          }\n          // rotate\n          this.params.angle = calcAngle(v, this.preVector)\n          this.cutMode && !this.disableCtrl ? this.setCut() : !this.disableRotate && this.rotate()\n        }\n        this.preVector.x = v.x\n        this.preVector.y = v.y\n      } else { // translate\n        const diffX = point.pageX - this.touch.startX\n        const diffY = point.pageY - this.touch.startY\n        this.params.diffY = diffY\n        this.params.diffX = diffX\n        if (this.movetouch.x) {\n          this.params.deltaX = point.pageX - this.movetouch.x\n          this.params.deltaY = point.pageY - this.movetouch.y\n        } else {\n          this.params.deltaX = this.params.deltaY = 0\n        }\n        if (ABS(diffX) > 30 || ABS(diffY) > 30) {\n          this.doubleTap = false\n        }\n        this.cutMode && !this.disableCtrl ? this.setCut() : !this.disableTranslate && this.translate()\n        this.movetouch.x = point.pageX\n        this.movetouch.y = point.pageY\n      }\n      !this.cutMode && this.setBoundary()\n      if (e.touches.length > 1) {\n        e.preventDefault()\n      }\n    },\n    end() {\n      this.doubleTap && this.$emit('doubleTap')\n      this.cutMode && this.setBoundary()\n      this.init()\n      !this.disablePreview && this.preview()\n      this.draw()\n    },\n    translate() {\n      const transform = this.transform.translate\n      const meta = this.params\n      transform.x += meta.deltaX\n      transform.y += meta.deltaY\n    },\n    pinch() {\t\t\n      this.transform.zoom *= this.params.zoom\n    },\n    rotate() {\n      this.transform.angle += this.params.angle\n    },\n    setZoom(scale) {\n      scale = Math.min(Math.max(Number(scale) || 1, this.minZoom), this.maxZoom)\n      this.transform.zoom = scale\n    },\n    setTranslate(offset) {\n      if(Array.isArray(offset)) {\n        const x = Number(offset[0])\n        const y = Number(offset[1])\n        this.transform.translate.x = isNaN(x) ? this.transform.translate.x : this.corner.left + x\n        this.transform.translate.y = isNaN(y) ? this.transform.translate.y : this.corner.top + y\n      }\n    },\n    setRotate(angle) {\n      this.transform.angle = Number(angle) || 0\n    },\n    setTransform(x, y, angle, scale) {\n      this.setTranslate([x, y])\n      this.setZoom(scale)\r\n\t  console.log(\"setTransform***\")\n      this.setRotate(angle)\n    },\n    setCutMode(type) {\n      if(!this.src) return \n      if(this.disableCtrl) return\n      this.cutMode = true\n      this.cutDirection = type\n    },\n    setCut() {\n      const corner = this.corner\n      const meta = this.params\n      this.setMeta(this.cutDirection, meta) // correct cutter position\n      if (this.keepRatio) {\n        if (this.cutDirection === 'lt' || this.cutDirection === 'rb') {\n          meta.deltaY = meta.deltaX * this.cutRatio\n        } else {\n          meta.deltaX = meta.deltaY / this.cutRatio\n        }\n      }\n      switch (this.cutDirection) {\n        case 'lt':\n          corner.top += meta.deltaY\n          corner.left += meta.deltaX\n          break\n        case 'rt':\n          corner.top += meta.deltaY\n          corner.right -= this.keepRatio ? -meta.deltaX : meta.deltaX\n          break\n        case 'rb':\n          corner.right -= meta.deltaX\n          corner.bottom -= meta.deltaY\n          break\n        case 'lb':\n          corner.bottom -= meta.deltaY\n          corner.left += this.keepRatio ? -meta.deltaX : meta.deltaX\n          break\n      }\n      this.ctrlWidth = this.containerWidth - corner.left - corner.right\n      this.ctrlHeight = this.containerHeight - corner.top - corner.bottom\n    },\n    setMeta(direction, meta) {\n      const {ctrlWidth, ctrlHeight, minWidth, minHeight } = this\n      switch(direction) {\n        case 'lt':\n          if(meta.deltaX > 0 || meta.deltaY > 0) {\n            meta.deltaX = Math.min(meta.deltaX, ctrlWidth - minWidth)\n            meta.deltaY = Math.min(meta.deltaY, ctrlHeight - minHeight)\n          }\n          break\n        case 'rt':\n          if(meta.deltaX < 0 || meta.deltaY > 0) {\n            meta.deltaX = Math.max(meta.deltaX, minWidth - ctrlWidth)\n            meta.deltaY = Math.min(meta.deltaY, ctrlHeight - minHeight)\n          }\n          break\n        case 'rb':\n          if(meta.deltaX < 0 || meta.deltaY < 0) {\n            meta.deltaX = Math.max(meta.deltaX, minWidth - ctrlWidth)\n            meta.deltaY = Math.max(meta.deltaY, minHeight - ctrlHeight)\n          }\n          break\n        case 'lb':\n          if(meta.deltaX > 0 || meta.deltaY < 0) {\n            meta.deltaX = Math.min(meta.deltaX, ctrlWidth - minWidth)\n            meta.deltaY = Math.max(meta.deltaY, minHeight - ctrlHeight)\n          }\n          break\n      }\n\n    },\n    setBoundary() {\n      let zoom = this.transform.zoom\n      zoom = zoom < this.minZoom ? this.minZoom : (zoom > this.maxZoom ? this.maxZoom : zoom)\r\n\t  this.transform.zoom = zoom;\n      if (!this.boundDetect || !this.disableRotate && !this.freeBoundDetect) return true\n      const translate = this.transform.translate\n      const corner = this.corner\n      const minX = corner.left - this.image.width + this.ctrlWidth - this.image.width * (zoom - 1) / 2\n      const maxX = corner.left + this.image.width * (zoom - 1) / 2\n      const minY = corner.top - this.image.height + this.ctrlHeight - this.image.height * (zoom - 1) / 2\n      const maxY = corner.top + this.image.height * (zoom - 1) / 2\n      translate.x = Math.floor(translate.x < minX ? minX : (translate.x > maxX ? maxX : translate.x))\n      translate.y = Math.floor(translate.y < minY ? minY : (translate.y > maxY ? maxY : translate.y))\n    },\n    preview() {\n      clearTimeout(this.previewTimer)\n      this.previewTimer = setTimeout(() => {\n        this.view = true\n      }, 500)\n    },\n    draw() {\n      // #ifdef MP-ALIPAY\n      const context = uni.createCanvasContext(this.canvasId)\n      // #endif\n      // #ifndef MP-ALIPAY\n      const context = uni.createCanvasContext(this.canvasId, this)\n      // #endif\n      const transform = this.transform\n      const corner = this.corner\n      const canvasZoom = this.canvasZoom\n      const img = this.image\n      context.save()\n      context.setFillStyle(this.canvasBackground)\n      this.$emit('beforeDraw', context, transform) // beforeDraw hook\n\n      const zoom = transform.zoom\n      context.fillRect(0, 0, this.ctrlWidth * canvasZoom, this.ctrlHeight * canvasZoom) // clear canvas\n      context.translate((transform.translate.x - corner.left + img.width / 2) *canvasZoom, (transform.translate.y - corner.top + img.height / 2) * canvasZoom) // translate the canvas's orgin to the image center\n      context.rotate(transform.angle * Math.PI / 180)\n      context.translate(-img.width * zoom * 0.5 * canvasZoom, -img.height * zoom * 0.5 * canvasZoom)\n      context.drawImage(this.img, 0, 0, img.width * zoom * canvasZoom, img.height * zoom * canvasZoom)\n      context.restore()\n      this.$emit('afterDraw', context, {\n        width: this.ctrlWidth * canvasZoom,\n        height: this.ctrlHeight * canvasZoom\n      }) // afterDraw hook\n      context.draw(false, () => {\n        uni.canvasToTempFilePath({\n          canvasId: this.canvasId,\n          quality: this.quality || 1,\n          fileType: this.fileType,\n          success: (res) => {\n            this.$emit('cropped', res.tempFilePath, {\n              originWidth: this.image.originWidth,\n              originHeight: this.image.originHeight,\n              width: this.ctrlWidth * canvasZoom,\n              height: this.ctrlHeight * canvasZoom,\n              scale: zoom,\n              translate: {\n                x: transform.translate.x,\n                y: transform.translate.y\n              },\n              rotate: transform.angle\n            }) // draw callback\n          }\n        }, this)\n      })\n    }\n  }\n}\n","import Component from 'E:/GitProject/uniappWardrobe/components/nice-cropper/cropper.vue'\nwx.createComponent(Component)"],"names":["uni"],"mappings":"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"}